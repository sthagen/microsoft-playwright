/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-console */

import fs from 'fs';
import * as playwright from '../..';
import type { BrowserType } from '../client/browserType';
import type { LaunchServerOptions } from '../client/types';
import { createPlaywright, DispatcherConnection, Root, PlaywrightDispatcher } from '../server';
import type { Playwright } from '../server';
import { IpcTransport, PipeTransport } from '../protocol/transport';
import { PlaywrightServer } from '../remote/playwrightServer';
import { gracefullyCloseAll } from '../utils/processLauncher';
import { Recorder } from '../server/recorder';
import { EmptyRecorderApp } from '../server/recorder/recorderApp';
import type { BrowserContext } from '../server/browserContext';
import { serverSideCallMetadata } from '../server/instrumentation';

export function printApiJson() {
  // Note: this file is generated by build-playwright-driver.sh
  console.log(JSON.stringify(require('../../api.json')));
}

export function runDriver() {
  const dispatcherConnection = new DispatcherConnection();
  new Root(dispatcherConnection, async (rootScope, { sdkLanguage }) => {
    const playwright = createPlaywright(sdkLanguage);
    return new PlaywrightDispatcher(rootScope, playwright);
  });
  const transport = process.send ? new IpcTransport(process) : new PipeTransport(process.stdout, process.stdin);
  transport.onmessage = message => dispatcherConnection.dispatch(JSON.parse(message));
  dispatcherConnection.onmessage = message => transport.send(JSON.stringify(message));
  transport.onclose = () => {
    // Drop any messages during shutdown on the floor.
    dispatcherConnection.onmessage = () => {};
    selfDestruct();
  };
}

export async function runServer(port: number | undefined, path = '/', maxClients = Infinity, enableSocksProxy = true, reuseBrowser = false) {
  const maxIncomingConnections = maxClients;
  const maxConcurrentConnections = reuseBrowser ? 1 : maxClients;
  const server = new PlaywrightServer(reuseBrowser ? 'reuse-browser' : 'auto', { path, maxIncomingConnections, maxConcurrentConnections, enableSocksProxy });
  const wsEndpoint = await server.listen(port);
  process.on('exit', () => server.close().catch(console.error));
  console.log('Listening on ' + wsEndpoint);  // eslint-disable-line no-console
  process.stdin.on('close', () => selfDestruct());
  if (process.send && server.preLaunchedPlaywright())
    wireController(server.preLaunchedPlaywright()!, wsEndpoint);
}

export async function launchBrowserServer(browserName: string, configFile?: string) {
  let options: LaunchServerOptions = {};
  if (configFile)
    options = JSON.parse(fs.readFileSync(configFile).toString());
  const browserType = (playwright as any)[browserName] as BrowserType;
  const server = await browserType.launchServer(options);
  console.log(server.wsEndpoint());
}

function selfDestruct() {
  // Force exit after 30 seconds.
  setTimeout(() => process.exit(0), 30000);
  // Meanwhile, try to gracefully close all browsers.
  gracefullyCloseAll().then(() => {
    process.exit(0);
  });
}

const internalMetadata = serverSideCallMetadata();

function wireController(playwright: Playwright, wsEndpoint: string) {
  process.send!({ method: 'ready', params: { wsEndpoint } });
  process.on('message', async message => {
    try {
      if (message.method === 'kill') {
        selfDestruct();
        return;
      }

      if (message.method === 'inspect') {
        if (!message.params.enabled) {
          for (const recorder of await allRecorders(playwright)) {
            recorder.setHighlightedSelector('');
            recorder.setMode('none');
          }
          return;
        }

        // Create browser if none.
        const browsers = playwright.allBrowsers();
        if (!browsers.length)
          await playwright.chromium.launch(internalMetadata, { headless: false });
        // Create page if none.
        const pages = playwright.allPages();
        if (!pages.length) {
          const [browser] = playwright.allBrowsers();
          const { context } = await browser.newContextForReuse({}, internalMetadata);
          await context.newPage(internalMetadata);
        }
        // Toggle inspect mode.
        for (const recorder of await allRecorders(playwright)) {
          recorder.setHighlightedSelector('');
          recorder.setMode('inspecting');
        }
        return;
      }

      if (message.method === 'highlight') {
        for (const recorder of await allRecorders(playwright))
          recorder.setHighlightedSelector(message.params.selector);
        return;
      }

    } catch (e) {
      process.send!({ method: 'error', params: { error: e.toString() } });
    }
  });
}

async function allRecorders(playwright: Playwright): Promise<Recorder[]> {
  const contexts = new Set<BrowserContext>();
  for (const page of playwright.allPages())
    contexts.add(page.context());
  const result = await Promise.all([...contexts].map(c => Recorder.show(c, {}, () => Promise.resolve(new InspectingRecorderApp()))));
  return result.filter(Boolean) as Recorder[];
}

class InspectingRecorderApp extends EmptyRecorderApp {
  override async setSelector(selector: string): Promise<void> {
    process.send!({ method: 'inspectRequested', params: { selector } });
  }
}
