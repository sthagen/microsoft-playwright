name: tests

on:
  push:
    branches:
      - master
      - release-*
  pull_request:
    branches:
      - master
      - release-*

env:
  CI: true
  # Force terminal colors. @see https://www.npmjs.com/package/colors
  FORCE_COLOR: 1

jobs:
  chromium_linux:
    name: "Chromium Linux"
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: mkdir -p coredumps
    # Set core dump file name pattern
    - run: sudo bash -c 'echo "$(pwd -P)/coredumps/core-pid_%p.dump" > /proc/sys/kernel/core_pattern'
    # XVFB-RUN merges both STDOUT and STDERR, whereas we need only STDERR
    # Wrap `npm run` in a subshell to redirect STDERR to file.
    # Enable core dumps in the subshell.
    - run: xvfb-run --auto-servernum -- bash -c "ulimit -c unlimited && npm run ccoverage 2>./chromium-linux-testrun.log"
      env:
        DEBUG: "*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-chromium'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: chromium-linux-output
        path: test/output-chromium
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: chromium-linux-testrun.log
        path: chromium-linux-testrun.log
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: chromium-linux-coredumps
        path: coredumps

  chromium_mac:
    name: "Chromium Mac"
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: npm run ctest 2>./chromium-mac-testrun.log
      env:
        DEBUG: "*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-chromium'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: chromium-mac-output
        path: test/output-chromium
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: chromium-mac-testrun.log
        path: chromium-mac-testrun.log

  chromium_win:
    name: "Chromium Win"
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: npm run ctest 2>./chromium-win-testrun.log
      shell: bash
      env:
        DEBUG: "*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-chromium'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: chromium-win-output
        path: test/output-chromium
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: chromium-win-testrun.log
        path: chromium-win-testrun.log

  webkit_linux:
    name: "WebKit Linux"
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: mkdir -p coredumps
    # Set core dump file name pattern
    - run: sudo bash -c 'echo "$(pwd -P)/coredumps/core-pid_%p.dump" > /proc/sys/kernel/core_pattern'
    # XVFB-RUN merges both STDOUT and STDERR, whereas we need only STDERR
    # Wrap `npm run` in a subshell to redirect STDERR to file.
    # Enable core dumps in the subshell.
    - run: xvfb-run --auto-servernum -- bash -c "ulimit -c unlimited && npm run wcoverage 2>./webkit-linux-testrun.log"
      env:
        DEBUG: "*,-pw:wrapped*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-webkit'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: webkit-linux-output
        path: test/output-webkit
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: webkit-linux-testrun.log
        path: webkit-linux-testrun.log
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: webkit-linux-coredumps
        path: coredumps

  webkit_mac:
    name: "WebKit Mac"
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: npm run wtest 2>./webkit-mac-testrun.log
      env:
        DEBUG: "*,-pw:wrapped*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-webkit'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: webkit-mac-output
        path: test/output-webkit
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: webkit-mac-testrun.log
        path: webkit-mac-testrun.log

  webkit_win:
    name: "WebKit Win"
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: npm run wtest 2>./webkit-win-testrun.log
      shell: bash
      env:
        DEBUG: "*,-pw:wrapped*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-webkit'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: webkit-win-output
        path: test/output-webkit
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: webkit-win-testrun.log
        path: webkit-win-testrun.log

  firefox_linux:
    name: "Firefox Linux"
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: mkdir -p coredumps
    # Set core dump file name pattern
    - run: sudo bash -c 'echo "$(pwd -P)/coredumps/core-pid_%p.dump" > /proc/sys/kernel/core_pattern'
    # XVFB-RUN merges both STDOUT and STDERR, whereas we need only STDERR
    # Wrap `npm run` in a subshell to redirect STDERR to file.
    # Enable core dumps in the subshell.
    - run: xvfb-run --auto-servernum -- bash -c "ulimit -c unlimited && npm run fcoverage 2>./firefox-linux-testrun.log"
      env:
        DEBUG: "*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-firefox'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: firefox-linux-output
        path: test/output-firefox
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: firefox-linux-testrun.log
        path: firefox-linux-testrun.log
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: firefox-linux-coredumps
        path: coredumps

  firefox_mac:
    name: "Firefox Mac"
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: npm run ftest 2>./firefox-mac-testrun.log
      env:
        DEBUG: "*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-firefox'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: firefox-mac-output
        path: test/output-firefox
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: firefox-mac-testrun.log
        path: firefox-mac-testrun.log

  firefox_win:
    name: "Firefox Win"
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: npm run ftest 2>./firefox-win-testrun.log
      shell: bash
      env:
        DEBUG: "*"
    # Ensure output folder exists just in case it was not created by the test run.
    - run: node -e "require('fs').mkdirSync(require('path').join('test', 'output-firefox'), {recursive:true})"
      if: failure()
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: firefox-win-output
        path: test/output-firefox
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: firefox-win-testrun.log
        path: firefox-win-testrun.log

  test-package-installations:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node_version:
        - "^10.17.0" # pre 10.17, --unhandled-rejections=strict was not an option (https://github.com/nodejs/node/pull/26599) which we need in our tests
        - "^12.0.0"
        - "^14.1.0"  # pre 14.1, zip extraction was broken (https://github.com/microsoft/playwright/issues/1988)
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node_version }}
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: bash packages/installation-tests/installation-tests.sh

  headful_linux:
    name: "Headful Linux"
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v1
      with:
        node-version: 10
    - uses: microsoft/playwright-github-action@v1
    - run: npm ci
    - run: mkdir -p coredumps
    # Set core dump file name pattern
    - run: sudo bash -c 'echo "$(pwd -P)/coredumps/core-pid_%p.dump" > /proc/sys/kernel/core_pattern'
    # XVFB-RUN merges both STDOUT and STDERR, whereas we need only STDERR
    # Wrap `npm run` in a subshell to redirect STDERR to file.
    # Enable core dumps in the subshell.
    - run: xvfb-run --auto-servernum -- bash -c "ulimit -c unlimited && HEADLESS=false npm run test -- --line-break=100 2>./headful-linux-testrun.log"
      env:
        DEBUG: "*"
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: headful-linux-testrun.log
        path: headful-linux-testrun.log
    - uses: actions/upload-artifact@v1
      if: failure()
      with:
        name: headful-linux-coredumps
        path: coredumps
